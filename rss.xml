<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>DevPoints Blog</title>
        <link>https://rodmax.github.io/dev-points/</link>
        <description>DevPoints Blog</description>
        <lastBuildDate>Sun, 11 Sep 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[TS-type aware configuration files]]></title>
            <link>https://rodmax.github.io/dev-points/2022/09/11/ts-type-aware-configuration-files</link>
            <guid>/2022/09/11/ts-type-aware-configuration-files</guid>
            <pubDate>Sun, 11 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[The problem]]></description>
            <content:encoded><![CDATA[<h2>The problem</h2><p>:bulb: I feel frustrated any time, when i have no autocomplete on typing a property in a config file for a popular tool
like <code>prettier.config.json</code>...</p><p>Sometimes, the IDE/CodeEditor knowns &quot;schema&quot; of <code>json/yaml</code> config and hints when you type(for ex. <code>tsconfig.json</code>, <code>package.json</code>).
But frequently it is not so.</p><p>Notice the problem is not about productivity or business-related code quality metrics
but what developer experience <del>should be</del> i expect in 2022+ year</p><blockquote><p>If you use the WebStorm and your IDE helps you cook all config files in your project,
you are lucky and may not read the below part of this blog :smile:.
But even in this case, I will suggest some advantages you may like. See the <a href="#conclusion">Conclusion</a> section.</p></blockquote><h2>TypeScript is everywhere</h2><p>Almost all popular tools in the nodejs world follow trends:</p><ul><li>involve TypeScript for public API and/or internal development(even JS-written tools try to provide <code>.d.ts</code> files as contract)</li><li>allow different file formats for its configuration files (json,json5,ini,yaml,js)</li></ul><p>Both facts allow us to use the following approach...</p><h2>TL;DR;</h2><ul><li>Use whenever possible config files in <code>js</code> format instead of <code>json,yaml,ini</code></li><li>Enable TS checking and annotate config object with TS-types using <code>jsdoc</code></li></ul><p>The code snippet:</p><pre><code class="language-js">/**
 * .{my-fancy-tool-config}.js
 */
// @ts-check

/** @type {import(&#x27;my-fancy-tool/path-to-types&#x27;).ConfigType} */
const config = {
    thisPropertyAutocompleted: ```
        and marks as error in case of
        not existing/missing key
        or wrong type of value```,
}
module.exports = config
</code></pre><h2>Examples</h2><h3>.eslintrc.js</h3><pre><code class="language-js">// @ts-check
/**
 * @type { import(&#x27;eslint&#x27;).Linter.Config }
 */
const config = {...}
module.exports = config
</code></pre><h3>webpack.config.js</h3><pre><code class="language-js">// @ts-check
/**
 * @typedef { import(&#x27;webpack&#x27;).Configuration &amp; {
 *      devServer: import(&#x27;webpack-dev-server&#x27;).Configuration
 * }} WebpackConfiguration
 *
 * @type { WebpackConfiguration }
 */
const config = {...}
module.exports = config
</code></pre><h3>prettier.config.js</h3><pre><code class="language-js">// @ts-check
/**
 * @typedef { import(&#x27;prettier&#x27;).Options } PrettierConfig
 * @typedef { {files: string | string[], options: PrettierConfig} } PrettierOverrideConfig
 * @type { PrettierConfig &amp; { overrides?: PrettierOverrideConfig[] } }
 */
const config = {
    ...,
    tabWidth: 4,
    // &quot;overrides&quot; not provided by original typings
    // so we add our custom &quot;overrides&quot; (see jsdoc comment above)
    overrides: [
        {
            files: &#x27;*.{json,yaml,yml}&#x27;,
            options: { tabWidth: 2 },
        },
    ],
}
module.exports = config
</code></pre><h3>stylelint.config.js</h3><pre><code class="language-js">// @ts-check
/**
 * @type { import(&#x27;stylelint&#x27;).Config }
 */
const config = {...}
module.exports = config
</code></pre><h3>.testcaferc.js</h3><p>Below typings is a most hacky example of what did I have to do in the real world, but the solution seems ok to me.</p><pre><code class="language-js">// @ts-check
/// &lt;reference path=&#x27;node_modules/testcafe/ts-defs/index.d.ts&#x27;/&gt;
/**
 * @typedef { Partial&lt;TestCafeConfigurationOptions&gt; &amp; {
 *  hooks?: {
 *      runTest?: {
 *          before?(): void
 *          after?(): void
 *      }
 *  }
 * } } TestCafeImprovedConfig
 */

/**
 * @type { TestCafeImprovedConfig }
 */
const config = {}
module.exports = config
</code></pre><h3>docusaurus.config.js</h3><pre><code class="language-js">// @ts-check
/** @type {import(&#x27;@docusaurus/types&#x27;).DocusaurusConfig} */
const config = {...}
module.exports = config
</code></pre><h2>Conclusion</h2><p>:white_check_mark: pros:</p><ul><li>good developer experience when configuring tools</li><li>continuous integration. <code>Eslint</code> with enabled <code>@typescript-eslint/parser</code> will<ul><li>mentor your juniors</li><li>kick you, if you suddenly decide to quickly tweak the config using <code>vim</code> and make typo</li><li>catch regressions when you bump tool version</li></ul></li><li>find the power of TS in a place where you might not have expected</li></ul><p>:disappointed: cons:</p><ul><li>type annotating may be a challenge for junior/middle developers.
Typically tool packages don&#x27;t provide documented way how to add types for configuration.
In my practice i don&#x27;t met the issues when i can&#x27;t fix/workaround it but
if you are not sure about <code>Omit,Pick,Partial,ReturnType,infer,Parameters</code> first practice with this TS-features
(read this article, if everything in it is familiar and clear to you, you are a TS master)</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Newsletters and regular resources for FrontEnd developer]]></title>
            <link>https://rodmax.github.io/dev-points/2022/01/02/reqular-dev-resources</link>
            <guid>/2022/01/02/reqular-dev-resources</guid>
            <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2>Intro</h2><p>The resources presented in the article are primarily addressed to the <em>SPA-focused</em> Front-End developers.<br/>
To be honest, these are my favorite resources.
so my taste preferences could affect the choice</p><p>The information bellow is suitable for both <code>juniors</code> and <code>seniors</code></p><h2>&quot;Baseline&quot; pack</h2><p>Here i collect <em>required</em> set of resources to follow</p><p>:teacher: quick scan all articles from these subscriptions on a regular basis,
and study in detail 1-3 depending on free time.</p><ul><li><a href="https://javascriptweekly.com">JavaScript Weekly</a></li><li><a href="https://css-weekly.com/">CSS Weekly</a></li><li><a href="https://www.typescript-weekly.com">TypeScript Weekly</a></li><li><a href="https://react.statuscode.com">React Status</a> <!-- -->[or your favorite <code>{framework}</code> Weekly]</li><li><a href="https://web-standards.ru/podcast/">Web standards podcast</a></li></ul><h2>&quot;Nice To Have&quot; pack</h2><ul><li><a href="https://front.sexy/">Сделай мне красиво podcast</a></li><li><a href="https://umaar.com/dev-tips/">Dev tips by Umar Hansa</a><ul><li>not actively updated but study its archive to improve your chrome dev tools skills</li></ul></li></ul><h2>&quot;Development is my <del>live</del>hobby&quot; pack</h2><ul><li><a href="https://radio-t.com/">Radio-T podcast</a></li><li><a href="https://t.me/webnya">Webnya Telegram Channel</a></li></ul><h2>Conclusion</h2><p>In fact, I am subscribed to a much more <del>useless</del> stuff,<br/>
but these I described above seem to cover the actual informational stream</p><p>:bulb: Regular newsletters are only one part of your professional progress.<br/>
Do not forget about studying technologies and tools using courses(or self-study), books, take part in open source.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://rodmax.github.io/dev-points/2022/01/01/welcome</link>
            <guid>/2022/01/01/welcome</guid>
            <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Hi I’m Max, a developer from Belarus]]></description>
            <content:encoded><![CDATA[<p>Hi I’m Max, a developer from Belarus</p><p>While communicating with colleagues, we often find interesting solutions, tips, something useful and sharable.</p><p>Sometimes I give advice in working chats and notice that these answers later would be of great help to someone else</p><p>so I started writing something on this blog</p><p>At worst, I learn how to cook <a href="https://docusaurus.io/">docusaurus</a> sites :sunglasses:</p>]]></content:encoded>
        </item>
    </channel>
</rss>