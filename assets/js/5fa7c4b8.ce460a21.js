"use strict";(self.webpackChunkdev_points=self.webpackChunkdev_points||[]).push([[56],{3322:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/09/11/ts-type-aware-configuration-files","metadata":{"permalink":"/dev-points/2022/09/11/ts-type-aware-configuration-files","source":"@site/blog/2022-09-11-ts-type-aware-configuration-files.md","title":"TS-type aware configuration files","description":"The problem","date":"2022-09-11T00:00:00.000Z","formattedDate":"September 11, 2022","tags":[{"label":"frontend","permalink":"/dev-points/tags/frontend"},{"label":"eslintrc","permalink":"/dev-points/tags/eslintrc"},{"label":"ts","permalink":"/dev-points/tags/ts"},{"label":"nodejs","permalink":"/dev-points/tags/nodejs"}],"readingTime":3.085,"truncated":false,"authors":[],"nextItem":{"title":"Newsletters and regular resources for FrontEnd developer","permalink":"/dev-points/2022/01/02/reqular-dev-resources"}},"content":"## The problem\\n\\n:bulb: **I feel frustrated any time, when i have no autocomplete on typing a property in a config file for a popular tool**\\nlike `prettier.config.json`...\\n\\nSometimes, the IDE/CodeEditor knowns \\"schema\\" of `json/yaml` config and hints when you type(for ex. `tsconfig.json`, `package.json`).\\nBut frequently it is not so.\\n\\nNotice the problem is not about productivity or business-related code quality metrics\\nbut what developer experience ~~should be~~ i expect in 2022+ year\\n\\n> If you use the WebStorm and your IDE helps you cook all config files in your project,\\n> you are lucky and may not read the below part of this blog :smile:.\\n> But even in this case, I will suggest some advantages you may like. See the [Conclusion](#conclusion) section.\\n\\n## TypeScript is everywhere\\n\\nAlmost all popular tools in the nodejs world follow trends:\\n\\n-   involve TypeScript for public API and/or internal development(even JS-written tools try to provide `.d.ts` files as contract)\\n-   allow different file formats for its configuration files (json,json5,ini,yaml,js)\\n\\nBoth facts allow us to use the following approach...\\n\\n## TL;DR;\\n\\n-   Use whenever possible config files in `js` format instead of `json,yaml,ini`\\n-   Enable TS checking and annotate config object with TS-types using `jsdoc`\\n\\nThe code snippet:\\n\\n````js\\n/**\\n * .{my-fancy-tool-config}.js\\n */\\n// @ts-check\\n\\n/** @type {import(\'my-fancy-tool/path-to-types\').ConfigType} */\\nconst config = {\\n    thisPropertyAutocompleted: ```\\n        and marks as error in case of\\n        not existing/missing key\\n        or wrong type of value```,\\n}\\nmodule.exports = config\\n````\\n\\n## Examples\\n\\n### .eslintrc.js\\n\\n```js\\n// @ts-check\\n/**\\n * @type { import(\'eslint\').Linter.Config }\\n */\\nconst config = {...}\\nmodule.exports = config\\n```\\n\\n### webpack.config.js\\n\\n```js\\n// @ts-check\\n/**\\n * @typedef { import(\'webpack\').Configuration & {\\n *      devServer: import(\'webpack-dev-server\').Configuration\\n * }} WebpackConfiguration\\n *\\n * @type { WebpackConfiguration }\\n */\\nconst config = {...}\\nmodule.exports = config\\n```\\n\\n### prettier.config.js\\n\\n```js\\n// @ts-check\\n/**\\n * @typedef { import(\'prettier\').Options } PrettierConfig\\n * @typedef { {files: string | string[], options: PrettierConfig} } PrettierOverrideConfig\\n * @type { PrettierConfig & { overrides?: PrettierOverrideConfig[] } }\\n */\\nconst config = {\\n    ...,\\n    tabWidth: 4,\\n    // \\"overrides\\" not provided by original typings\\n    // so we add our custom \\"overrides\\" (see jsdoc comment above)\\n    overrides: [\\n        {\\n            files: \'*.{json,yaml,yml}\',\\n            options: { tabWidth: 2 },\\n        },\\n    ],\\n}\\nmodule.exports = config\\n```\\n\\n### stylelint.config.js\\n\\n```js\\n// @ts-check\\n/**\\n * @type { import(\'stylelint\').Config }\\n */\\nconst config = {...}\\nmodule.exports = config\\n```\\n\\n### .testcaferc.js\\n\\nBelow typings is a most hacky example of what did I have to do in the real world, but the solution seems ok to me.\\n\\n```js\\n// @ts-check\\n/// <reference path=\'node_modules/testcafe/ts-defs/index.d.ts\'/>\\n/**\\n * @typedef { Partial<TestCafeConfigurationOptions> & {\\n *  hooks?: {\\n *      runTest?: {\\n *          before?(): void\\n *          after?(): void\\n *      }\\n *  }\\n * } } TestCafeImprovedConfig\\n */\\n\\n/**\\n * @type { TestCafeImprovedConfig }\\n */\\nconst config = {}\\nmodule.exports = config\\n```\\n\\n### docusaurus.config.js\\n\\n```js\\n// @ts-check\\n/** @type {import(\'@docusaurus/types\').DocusaurusConfig} */\\nconst config = {...}\\nmodule.exports = config\\n```\\n\\n## Conclusion\\n\\n:white_check_mark: pros:\\n\\n-   good developer experience when configuring tools\\n-   continuous integration. `Eslint` with enabled `@typescript-eslint/parser` will\\n    -   mentor your juniors\\n    -   kick you, if you suddenly decide to quickly tweak the config using `vim` and make typo\\n    -   catch regressions when you bump tool version\\n-   find the power of TS in a place where you might not have expected\\n\\n:disappointed: cons:\\n\\n-   type annotating may be a challenge for junior/middle developers.\\n    Typically tool packages don\'t provide documented way how to add types for configuration.\\n    In my practice i don\'t met the issues when i can\'t fix/workaround it but\\n    if you are not sure about `Omit,Pick,Partial,ReturnType,infer,Parameters` first practice with this TS-features\\n    (read this article, if everything in it is familiar and clear to you, you are a TS master)"},{"id":"/2022/01/02/reqular-dev-resources","metadata":{"permalink":"/dev-points/2022/01/02/reqular-dev-resources","source":"@site/blog/2022-01-02-reqular-dev-resources.md","title":"Newsletters and regular resources for FrontEnd developer","description":"Intro","date":"2022-01-02T00:00:00.000Z","formattedDate":"January 2, 2022","tags":[{"label":"frontend","permalink":"/dev-points/tags/frontend"}],"readingTime":0.985,"truncated":false,"authors":[],"prevItem":{"title":"TS-type aware configuration files","permalink":"/dev-points/2022/09/11/ts-type-aware-configuration-files"},"nextItem":{"title":"Welcome","permalink":"/dev-points/2022/01/01/welcome"}},"content":"## Intro\\n\\nThe resources presented in the article are primarily addressed to the _SPA-focused_ Front-End developers.<br/>\\nTo be honest, these are my favorite resources.\\nso my taste preferences could affect the choice\\n\\nThe information bellow is suitable for both `juniors` and `seniors`\\n\\n## \\"Baseline\\" pack\\n\\nHere i collect _required_ set of resources to follow\\n\\n:teacher: quick scan all articles from these subscriptions on a regular basis,\\nand study in detail 1-3 depending on free time.\\n\\n-   [JavaScript Weekly](https://javascriptweekly.com)\\n-   [CSS Weekly](https://css-weekly.com/)\\n-   [TypeScript Weekly](https://www.typescript-weekly.com)\\n-   [React Status](https://react.statuscode.com) [or your favorite `{framework}` Weekly]\\n-   [Web standards podcast](https://web-standards.ru/podcast/)\\n\\n## \\"Nice To Have\\" pack\\n\\n\x3c!--cSpell:words \u043a\u0440\u0430\u0441\u0438\u0432\u043e \u0441\u0434\u0435\u043b\u0430\u0439 --\x3e\\n\\n-   [\u0421\u0434\u0435\u043b\u0430\u0439 \u043c\u043d\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u043e podcast](https://front.sexy/)\\n-   [Dev tips by Umar Hansa](https://umaar.com/dev-tips/)\\n    -   not actively updated but study its archive to improve your chrome dev tools skills\\n\\n## \\"Development is my ~~live~~hobby\\" pack\\n\\n-   [Radio-T podcast](https://radio-t.com/)\\n-   [Webnya Telegram Channel](https://t.me/webnya)\\n\\n## Conclusion\\n\\nIn fact, I am subscribed to a much more ~~useless~~ stuff,<br/>\\nbut these I described above seem to cover the actual informational stream\\n\\n:bulb: Regular newsletters are only one part of your professional progress.<br/>\\nDo not forget about studying technologies and tools using courses(or self-study), books, take part in open source."},{"id":"/2022/01/01/welcome","metadata":{"permalink":"/dev-points/2022/01/01/welcome","source":"@site/blog/2022-01-01-welcome.md","title":"Welcome","description":"Hi I\u2019m Max (or Maxim), a developer from Belarus","date":"2022-01-01T00:00:00.000Z","formattedDate":"January 1, 2022","tags":[],"readingTime":0.41,"truncated":false,"authors":[],"prevItem":{"title":"Newsletters and regular resources for FrontEnd developer","permalink":"/dev-points/2022/01/02/reqular-dev-resources"}},"content":"Hi I\u2019m Max (or Maxim), a developer from Belarus\\n\\nWhile communicating with colleagues, we often find interesting solutions, tips, something useful and sharable.\\n\\nSometimes I just give advice in chats and notice that these answers later would be of great help to someone else\\n\\nI also tried to systematize my knowledge and see how it will look\\n\\nin the end, I created this project with blogs, notes to collect all above finds...\\n\\nAt worst, I learn how to mange [docusaurus](https://docusaurus.io/) sites :sunglasses:"}]}')}}]);