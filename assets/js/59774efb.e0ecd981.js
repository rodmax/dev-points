"use strict";(self.webpackChunkdev_points=self.webpackChunkdev_points||[]).push([[338],{4694:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var o=i(4848),s=i(8453);const t={title:"TS-type aware configuration files",tags:["frontend","eslintrc","ts","nodejs"]},r=void 0,l={permalink:"/dev-points/2022/09/11/ts-type-aware-configuration-files",source:"@site/blog/2022-09-11-ts-type-aware-configuration-files.md",title:"TS-type aware configuration files",description:"The problem",date:"2022-09-11T00:00:00.000Z",tags:[{inline:!0,label:"frontend",permalink:"/dev-points/tags/frontend"},{inline:!0,label:"eslintrc",permalink:"/dev-points/tags/eslintrc"},{inline:!0,label:"ts",permalink:"/dev-points/tags/ts"},{inline:!0,label:"nodejs",permalink:"/dev-points/tags/nodejs"}],readingTime:3.09,hasTruncateMarker:!0,authors:[],frontMatter:{title:"TS-type aware configuration files",tags:["frontend","eslintrc","ts","nodejs"]},unlisted:!1,nextItem:{title:"Newsletters and regular resources for FrontEnd developer",permalink:"/dev-points/2022/01/02/reqular-dev-resources"}},c={authorsImageUrls:[]},a=[{value:"The problem",id:"the-problem",level:2},{value:"TypeScript is everywhere",id:"typescript-is-everywhere",level:2},{value:"TL;DR;",id:"tldr",level:2},{value:"Examples",id:"examples",level:2},{value:".eslintrc.js",id:"eslintrcjs",level:3},{value:"webpack.config.js",id:"webpackconfigjs",level:3},{value:"prettier.config.js",id:"prettierconfigjs",level:3},{value:"stylelint.config.js",id:"stylelintconfigjs",level:3},{value:".testcaferc.js",id:"testcafercjs",level:3},{value:"docusaurus.config.js",id:"docusaurusconfigjs",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",del:"del",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"the-problem",children:"The problem"}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udca1"," I feel frustrated any time, when i have no autocomplete on typing a property in a config file for a popular tool\nlike ",(0,o.jsx)(n.code,{children:"prettier.config.json"}),"..."]}),"\n",(0,o.jsxs)(n.p,{children:['Sometimes, the IDE/CodeEditor knowns "schema" of ',(0,o.jsx)(n.code,{children:"json/yaml"})," config and hints when you type(for ex. ",(0,o.jsx)(n.code,{children:"tsconfig.json"}),", ",(0,o.jsx)(n.code,{children:"package.json"}),").\nBut frequently it is not so."]}),"\n",(0,o.jsxs)(n.p,{children:["Notice the problem is not about productivity or business-related code quality metrics\nbut what developer experience ",(0,o.jsx)(n.del,{children:"should be"})," i expect in 2022+ year"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["If you use the WebStorm and your IDE helps you cook all config files in your project,\nyou are lucky and may not read the below part of this blog ","\ud83d\ude04",".\nBut even in this case, I will suggest some advantages you may like. See the ",(0,o.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})," section."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"typescript-is-everywhere",children:"TypeScript is everywhere"}),"\n",(0,o.jsx)(n.p,{children:"Almost all popular tools in the nodejs world follow trends:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["involve TypeScript for public API and/or internal development(even JS-written tools try to provide ",(0,o.jsx)(n.code,{children:".d.ts"})," files as contract)"]}),"\n",(0,o.jsx)(n.li,{children:"allow different file formats for its configuration files (json,json5,ini,yaml,js)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Both facts allow us to use the following approach..."}),"\n",(0,o.jsx)(n.h2,{id:"tldr",children:"TL;DR;"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use whenever possible config files in ",(0,o.jsx)(n.code,{children:"js"})," format instead of ",(0,o.jsx)(n.code,{children:"json,yaml,ini"})]}),"\n",(0,o.jsxs)(n.li,{children:["Enable TS checking and annotate config object with TS-types using ",(0,o.jsx)(n.code,{children:"jsdoc"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The code snippet:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"/**\n * .{my-fancy-tool-config}.js\n */\n// @ts-check\n\n/** @type {import('my-fancy-tool/path-to-types').ConfigType} */\nconst config = {\n    thisPropertyAutocompleted: ```\n        and marks as error in case of\n        not existing/missing key\n        or wrong type of value```,\n}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"eslintrcjs",children:".eslintrc.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/**\n * @type { import('eslint').Linter.Config }\n */\nconst config = {...}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h3,{id:"webpackconfigjs",children:"webpack.config.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/**\n * @typedef { import('webpack').Configuration & {\n *      devServer: import('webpack-dev-server').Configuration\n * }} WebpackConfiguration\n *\n * @type { WebpackConfiguration }\n */\nconst config = {...}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prettierconfigjs",children:"prettier.config.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/**\n * @typedef { import('prettier').Options } PrettierConfig\n * @typedef { {files: string | string[], options: PrettierConfig} } PrettierOverrideConfig\n * @type { PrettierConfig & { overrides?: PrettierOverrideConfig[] } }\n */\nconst config = {\n    ...,\n    tabWidth: 4,\n    // \"overrides\" not provided by original typings\n    // so we add our custom \"overrides\" (see jsdoc comment above)\n    overrides: [\n        {\n            files: '*.{json,yaml,yml}',\n            options: { tabWidth: 2 },\n        },\n    ],\n}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h3,{id:"stylelintconfigjs",children:"stylelint.config.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/**\n * @type { import('stylelint').Config }\n */\nconst config = {...}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h3,{id:"testcafercjs",children:".testcaferc.js"}),"\n",(0,o.jsx)(n.p,{children:"Below typings is a most hacky example of what did I have to do in the real world, but the solution seems ok to me."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/// <reference path='node_modules/testcafe/ts-defs/index.d.ts'/>\n/**\n * @typedef { Partial<TestCafeConfigurationOptions> & {\n *  hooks?: {\n *      runTest?: {\n *          before?(): void\n *          after?(): void\n *      }\n *  }\n * } } TestCafeImprovedConfig\n */\n\n/**\n * @type { TestCafeImprovedConfig }\n */\nconst config = {}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h3,{id:"docusaurusconfigjs",children:"docusaurus.config.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// @ts-check\n/** @type {import('@docusaurus/types').DocusaurusConfig} */\nconst config = {...}\nmodule.exports = config\n"})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705"," pros:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"good developer experience when configuring tools"}),"\n",(0,o.jsxs)(n.li,{children:["continuous integration. ",(0,o.jsx)(n.code,{children:"Eslint"})," with enabled ",(0,o.jsx)(n.code,{children:"@typescript-eslint/parser"})," will","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"mentor your juniors"}),"\n",(0,o.jsxs)(n.li,{children:["kick you, if you suddenly decide to quickly tweak the config using ",(0,o.jsx)(n.code,{children:"vim"})," and make typo"]}),"\n",(0,o.jsx)(n.li,{children:"catch regressions when you bump tool version"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"find the power of TS in a place where you might not have expected"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\ude1e"," cons:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["type annotating may be a challenge for junior/middle developers.\nTypically tool packages don't provide documented way how to add types for configuration.\nIn my practice i don't met the issues when i can't fix/workaround it but\nif you are not sure about ",(0,o.jsx)(n.code,{children:"Omit,Pick,Partial,ReturnType,infer,Parameters"})," first practice with this TS-features\n(read this article, if everything in it is familiar and clear to you, you are a TS master)"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var o=i(6540);const s={},t=o.createContext(s);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);